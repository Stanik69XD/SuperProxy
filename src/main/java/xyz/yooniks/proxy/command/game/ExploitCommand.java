package xyz.yooniks.proxy.command.game;

import java.util.stream.Collectors;
import xyz.yooniks.proxy.command.basic.CommandExecutor;
import xyz.yooniks.proxy.command.basic.CommandInfo;
import xyz.yooniks.proxy.exploit.Exploit;
import xyz.yooniks.proxy.exploit.ExploitManager;
import xyz.yooniks.proxy.user.ProxyUser;

@CommandInfo(
    name = "exploit",
    aliases = { "crash", "crashers", "exploits", "krasz", "attack" },
    description = "Probuje przeciazyc serwer dana metoda"
)
public class ExploitCommand implements CommandExecutor {

  private final ExploitManager exploitManager;

  public ExploitCommand(ExploitManager exploitManager) {
    this.exploitManager = exploitManager;
  }

  @Override
  public void execute(ProxyUser executor, String[] args) {
    if (args.length < 1) {
      executor.asPlayer().ifPresent(player -> player.sendMessage("&cPoprawne uzycie: &6!exploit [list/nazwa exploita] <ilosc pakietow> <czy wysylac do botow (boolean)>"));
      return;
    }
    final String exploitName = args[0];

    if (exploitName.equalsIgnoreCase("list")) {
        executor.sendMessage("&7Lista exploitow: &6\" " + this.exploitManager.asImmutableList()
            .stream()
            .map(Exploit::getName)
            .collect(Collectors.joining(", ")) + "\"");
      return;
    }

    this.exploitManager.findExploit(exploitName)
        .ifPresentOrElse(exploit -> {
          int amount = 1000;
          boolean bots = false;
          if (args.length > 1) {
            try {
              amount = Integer.parseInt(args[1]);
            }
            catch (NumberFormatException exception) {
              executor.sendMessage("&cNie mozna sparsowac argumentu &6" + args[1] + "&c do Integera! Liczba pakietow defaultowa, &6" + amount);
            }
          }
          if (args.length > 2) {
            bots = Boolean.parseBoolean(args[2]);
          }

          exploit.start(executor, amount, bots);
        }, () ->
          executor.sendMessage("&cExploit o nazwie &6" + exploitName + " &cnie istnieje!")
        );
  }

}
