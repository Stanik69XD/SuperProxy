package xyz.yooniks.proxy.impl;

import com.google.common.collect.ImmutableList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ExecutorService;
import java.util.stream.Collectors;
import xyz.yooniks.proxy.exploit.Exploit;
import xyz.yooniks.proxy.exploit.ExploitManager;

public class ExploitManagerImpl implements ExploitManager {

  private final ExecutorService executorService;
  private final List<Exploit> exploitList = new ArrayList<>();

  public ExploitManagerImpl(ExecutorService executorService) {
    this.executorService = executorService;
  }

  @Override
  public void addToQueue(Runnable runnable) {
    this.executorService.submit(runnable);
  }

  @Override
  public void addExploits(Exploit... exploits) {
    this.exploitList.addAll(Arrays.stream(exploits).collect(Collectors.toList()));
  }

  @Override
  public Optional<Exploit> findExploit(String name) {
    return this.exploitList.stream()
        .filter(exploit -> exploit.getName().equalsIgnoreCase(name))
        .findFirst();
  }

  @Override
  public ImmutableList<Exploit> asImmutableList() {
    return ImmutableList.copyOf(this.exploitList);
  }

  @Override
  public ExecutorService getExecutorService() {
    return executorService;
  }

}
